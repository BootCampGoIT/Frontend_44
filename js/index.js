// ==========================================================================================================
//################## Строки #################################################################################
// ==========================================================================================================

// Напишите функцию delete_characters(str, length), которая возвращает подстроку, состоящую из указанного количества символов.


// Решение:
// // ======================================================

// Напишите функцию insert_dash(str), которая принимает строку str в качестве аргумента и вставляет тире (-) между словами. При этом все символы строки необходимо перевести в верхний регистр

// Решение:
// // ======================================================
// Напишите функцию, которая принимает строку в качестве аргумента и преобразует регистр первого символа строки из нижнего регистра в верхний.

// Решение:
// // ======================================================
// Напишите функцию remove_char(str), которая возвращает строку, очищенную от всех не буквенно-цифровых символов.

// const str = "every., -/ hunter #! wishes ;: {} to $ % ^ & * know"; 

// Решение:
// // ======================================================
// Напишите функцию insensitive_search(str1, str2), которая осуществляет поиск подстроки str2 в строке str1 без учёта регистра символов.

// Решение:
// // ======================================================
// Напишите функцию initCap(str), которая преобразует стиль написания составных слов строки в CamelCase, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово внутри строки пишется с заглавной буквы.

// Решение:
// // ======================================================
// Напишите функцию path(pathname), которая вовращает имя файла (подстрока после последнего символа "\" ) из полного пути к файлу.
// const pathname = "/home/user/dir/file.txt";

// Решение:
// // ======================================================
// Напишите функцию limitStr(str, n, symb), которая обрезает строку, если она длиннее указанного количества символов n. Усеченная строка должна заканчиваться троеточием «...» (если не задан параметр symb) или заданным символом symb.

// Решение:
// // ======================================================
// Напишите функцию strip(str), которая удаляет все лишние пробелы из строки str.
// const str = "    Max is a good      boy     "; 
// Решение:
// // ======================================================
// Напишите функцию removeDuplicate(str), которая возвращает строку, очищенную от слов-дупликатов, т.е. каждое слово должно повторяться не более одного раза.
// const str = "вишня, груша, слива, груша";

// // ==========================================================================================================
// //################## Массивы #################################################################################
// // ==========================================================================================================

// Напишите функцию removeDuplicates(arr), которая возвращает массив, в котором удалены повторяющиеся элементы из массива arr (игнорируйте чувствительность к регистру).
// const arr = ["php", "php", "css", "css",
// "script", "script", "html", "html", "java"
// ];
// Решение:
// // ======================================================
// Напишите код, который создаёт массив элементов представляющих собой сумму соответствующих элементов заданных массивов.

// const arr1 = [1, 2, 3, 4, 5];
// const arr2 = [4, 5, 6];
// Результат: [5,7,9,4,5]

// Решение:

// // ======================================================
// Напишите функцию countIdentic(arr), которая возвращает количество повторяющихся элементов в массиве.
// const arr = [3, 3, 7, 7, 3, 3, 4, 5, 5, 8, 8, 8]

// Решение:
// // ======================================================
// Напишите код, который находит наиболее часто используемый элемент массива.

// Решение:
// // ======================================================
// Напишите функцию generateRange(start, end), которая генерирует массив заданной длины len, заполненный целыми числами. Каждое последующее число в массиве должно быть больше предыдущего на единицу.

// Решение:
// // ======================================================

// // ==========================================================================================================
// //################## Функции #################################################################################
// // ==========================================================================================================
// Напишите функцию JavaScript, которая переворачивает число.

// Решение:
// // ======================================================
// Вернуть переданную строку с буквами в алфавитном порядке

// Решение:
// // ======================================================
// Напишите функцию find_longest_word(str), которая принимает строку в качестве параметра и находит самое длинное слово в строке.

// Решение:
// // ======================================================
// Напишите функцию detect_data_type(value), которая принимает аргумент и возвращает тип.

// Решение:
// // ======================================================
// Напишите функцию JavaScript, которая возвращает элементы массива, которые больше указанного числа.

// Решение:
// // ======================================================
// Напишите функцию JavaScript, которая принимает два аргумента: строку и букву. Функция должна подсчитывать количество вхождений указанной буквы в строке.

// Решение:
// // ======================================================




